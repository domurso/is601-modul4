import pytest
from playwright.sync_api import sync_playwright, expect
import time
import requests
from requests.exceptions import ConnectionError

BASE_URL = "http://127.0.0.1:8000"

def generate_unique_username():
    return f"testuser_{int(time.time())}"

def is_server_up(url, timeout=5, max_attempts=5):
    for attempt in range(max_attempts):
        try:
            response = requests.get(f"{url}/health", timeout=timeout)
            print(f"Health check attempt {attempt + 1}: {response.status_code}")
            return response.status_code == 200
        except ConnectionError:
            print(f"Health check attempt {attempt + 1} failed: ConnectionError")
            time.sleep(2)
    return False

@pytest.fixture(scope="function")
def page():
    if not is_server_up(BASE_URL):
        pytest.fail(f"Server not running at {BASE_URL}. Ensure Docker container is running with port mapping '-p 8000:8001'.")
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        page = browser.new_page()
        page.on("console", lambda msg: print(f"Browser console: {msg.text}"))
        yield page
        page.close()
        browser.close()

@pytest.fixture(scope="function")
def logged_in_page(page):
    username = generate_unique_username()
    page.goto(f"{BASE_URL}/register")
    page.fill("#username", username)
    page.fill("#email", f"{username}@example.com")
    page.fill("#first_name", "Test")
    page.fill("#last_name", "User")
    page.fill("#password", "ValidPassword123!")
    page.fill("#confirm_password", "ValidPassword123!")
    page.click("button[type='submit']")
    page.wait_for_url(f"{BASE_URL}/login", timeout=30000)
    page.fill("#username", username)
    page.fill("#password", "ValidPassword123!")
    page.click("button[type='submit']")
    expect(page.locator("#success-message")).to_be_visible(timeout=30000)
    return page, username

def test_register_with_valid_data(page):
    username = generate_unique_username()
    for attempt in range(3):
        try:
            page.goto(f"{BASE_URL}/register", timeout=15000)
            print(f"Navigated to {BASE_URL}/register")
            break
        except Exception as e:
            print(f"Navigation attempt {attempt + 1} failed: {str(e)}")
            if attempt == 2:
                pytest.fail(f"Failed to navigate to {BASE_URL}/register: {str(e)}")
            time.sleep(2)
    page.fill("#username", username)
    page.fill("#email", f"{username}@example.com")
    page.fill("#first_name", "Test")
    page.fill("#last_name", "User")
    page.fill("#password", "ValidPassword123!")
    page.fill("#confirm_password", "ValidPassword123!")
    page.screenshot(path="screenshots/register_form_filled.png")
    with page.expect_response("**/auth/register") as response_info:
        page.click("button[type='submit']")
        response = response_info.value
        print(f"Register response: {response.status} {response.text()}")
        assert response.status == 201, f"Expected 201, got {response.status}: {response.text()}"
    success_message = page.locator("#success-message")
    expect(success_message).to_be_visible(timeout=30000)
    expect(success_message).to_have_text("Registration successful! Redirecting to login...")
    page.wait_for_url(f"{BASE_URL}/login", timeout=30000)

def test_login_with_correct_credentials(logged_in_page):
    page, username = logged_in_page
    success_message = page.locator("#success-message")
    expect(success_message).to_contain_text("Login successful! Access Token:")
    access_token = page.evaluate("() => localStorage.getItem('access_token')")
    assert access_token is not None, "Access token not stored in localStorage"

def test_register_with_short_password(page):
    page.goto(f"{BASE_URL}/register")
    page.fill("#username", "testuser")
    page.fill("#email", "testuser@example.com")
    page.fill("#first_name", "Test")
    page.fill("#last_name", "User")
    page.fill("#password", "short")
    page.fill("#confirm_password", "short")
    page.click("button[type='submit']")
    error_message = page.locator("#error-message")
    expect(error_message).to_be_visible(timeout=30000)
    expect(error_message).to_have_text("Password must be at least 8 characters long")

def test_login_with_wrong_password(logged_in_page):
    page, username = logged_in_page
    page.goto(f"{BASE_URL}/login")
    page.fill("#username", username)
    page.fill("#password", "WrongPassword")
    with page.expect_response("**/auth/login") as response_info:
        page.click("button[type='submit']")
        response = response_info.value
        print(f"Login response: {response.status} {response.text()}")
        assert response.status == 401, f"Expected 401, got {response.status}: {response.text()}"
    error_message = page.locator("#error-message")
    expect(error_message).to_be_visible(timeout=30000)
    expect(error_message).to_have_text("Invalid username or password")

def test_browse_calculations(logged_in_page):
    page, _ = logged_in_page
    page.goto(f"{BASE_URL}/calculations-page")
    page.screenshot(path="screenshots/calculations_page.png")
    expect(page.locator("h2")).to_have_text("Your Calculations")
    calculations_list = page.locator("#calculations-list")
    expect(calculations_list).to_be_visible(timeout=30000)
    no_calculations = page.locator("text=No calculations found")
    if no_calculations.is_visible():
        expect(no_calculations).to_be_visible()
    else:
        expect(calculations_list.locator("> div")).to_be_visible()

def test_add_calculation(logged_in_page):
    page, _ = logged_in_page
    page.goto(f"{BASE_URL}/calculations-page")
    page.select_option("#type", "addition")
    page.fill("#inputs", "2,2")  # Inputs to get result 4
    with page.expect_response("**/calculations") as response_info:
        page.click("#add-calculation-form button[type='submit']")
        response = response_info.value
        print(f"Add calculation response: {response.status} {response.text()}")
        assert response.status == 201, f"Expected 201, got {response.status}: {response.text()}"
    success_message = page.locator("#add-success")
    expect(success_message).to_be_visible(timeout=30000)
    expect(success_message).to_have_text("Calculation added successfully!")
    calc_div = page.locator("#calculations-list > div")
    expect(calc_div).to_be_visible(timeout=30000)
    expect(calc_div).to_contain_text("Type: addition")
    expect(calc_div).to_contain_text("Inputs: 2, 2")
    expect(calc_div).to_contain_text("Result: 4")

def test_read_and_edit_calculation(logged_in_page):
    page, _ = logged_in_page
    page.goto(f"{BASE_URL}/calculations-page")
    page.select_option("#type", "subtraction")
    page.fill("#inputs", "6,2")
    page.click("#add-calculation-form button[type='submit']")
    calc_div = page.locator("#calculations-list > div")
    expect(calc_div).to_be_visible(timeout=30000)
    calc_id = calc_div.locator("p").first.inner_text().split(": ")[1]
    page.evaluate("() => prompt = () => '8,4'")  # Edit to get result 4
    with page.expect_response(f"**/calculations/{calc_id}") as response_info:
        page.click("button:text('Edit')")
        response = response_info.value
        print(f"Edit calculation response: {response.status} {response.text()}")
        assert response.status == 200, f"Expected 200, got {response.status}: {response.text()}"
    expect(calc_div).to_contain_text("Inputs: 8, 4")
    expect(calc_div).to_contain_text("Result: 4")

def test_delete_calculation(logged_in_page):
    page, _ = logged_in_page
    page.goto(f"{BASE_URL}/calculations-page")
    page.select_option("#type", "multiplication")
    page.fill("#inputs", "2,2")
    page.click("#add-calculation-form button[type='submit']")
    calc_div = page.locator("#calculations-list > div")
    expect(calc_div).to_be_visible(timeout=30000)
    calc_id = calc_div.locator("p").first.inner_text().split(": ")[1]
    page.evaluate("() => confirm = () => true")
    with page.expect_response(f"**/calculations/{calc_id}") as response_info:
        page.click("button:text('Delete')")
        response = response_info.value
        print(f"Delete calculation response: {response.status} {response.text()}")
        assert response.status == 204, f"Expected 204, got {response.status}: {response.text()}"
    expect(calc_div).not_to_be_visible(timeout=30000)
